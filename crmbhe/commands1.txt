# JWT (JSON Web Token) 

In Laravel, the JWT-Auth package or Laravel Passport (which uses OAuth2) can be used to simplify the process of adding JWT-based authentication, giving you flexibility, scalability, and security for modern web and mobile apps.

JWT is ideal in this case because it’s passed via HTTP headers, meaning it can easily be used for cross-origin requests (CORS), and the server can verify the user’s identity without requiring cookies or session storage.

Middleware and Granular Access Control
Middleware in Laravel allows you to apply additional layers of access control. For example, you can have a JwtMiddleware that checks for a valid JWT token in every request, verifying whether the user is authenticated.
This is more scalable and easier to manage across multiple endpoints. Instead of adding authentication logic to each route, middleware allows you to centralize and modularize it. For example, only users with a certain role or permission can access specific routes.


# composer create-project --prefer-dist laravel/laravel crmbhe
# composer require tymon/jwt-auth
# php artisan vendor:publish --provider="Tymon\JWTAuth\Providers\LaravelServiceProvider"

   INFO  Publishing assets.

  Copying file [D:\xampp8.2.12\htdocs\crmbhe\vendor\tymon\jwt-auth\config\config.php] to [D:\xampp8.2.12\htdocs\crmbhe\config\jwt.php]  DONE


# php artisan jwt:secret

# Add jwt.auth middleware in app/Http/Kernel.php:
'jwt.auth' => \Tymon\JWTAuth\Middleware\Authenticate::class,



# php artisan make:model User
php artisan make:model Lead -m
php artisan make:model Application -m
php artisan make:model Assignment -m


HasFactory: Enables the use of model factories to easily generate fake data for testing, seeding, or creating instances of the model.

Notifiable: Allows the model to send notifications via various channels (e.g., email, SMS, database).

php artisan make:controller AuthController

php artisan make:middleware RoleMiddleware

php artisan make:controller LeadController


# VUE.JS
npm install -g @vue/cli
vue create crmbhefront

npm install axios vuex

npm install vuex@next

npm install vuedraggable


vue create crmfrontend
npm install axios vuex vue-router vue-draggable-next

npm run serve




Step 1: Setting up the Backend (Laravel)
1.1 Create the Laravel Project
First, you'll need to create a Laravel project. Run the following command to create a new Laravel project:

bash
Copy
composer create-project --prefer-dist laravel/laravel crm-system
This will set up a new Laravel project called crm-system.

1.2 Install JWT Authentication
To implement JWT-based authentication, you'll need the tymon/jwt-auth package:

bash
Copy
composer require tymon/jwt-auth
After installing the package, publish its configuration:

bash
Copy
php artisan vendor:publish --provider="Tymon\JWTAuth\Providers\LaravelServiceProvider"
1.3 Generate JWT Secret
Generate the JWT secret key:

bash
Copy
php artisan jwt:secret
This command adds a secret key to your .env file that will be used for JWT authentication.

1.4 Create the User Model for Authentication
In your User model, implement the JWTSubject interface:

php
Copy
use Tymon\JWTAuth\Contracts\JWTSubject;

class User extends Authenticatable implements JWTSubject
{
    protected $fillable = ['name', 'email', 'password', 'role']; // assuming 'role' is a column to define Admin or Counselor

    public function getJWTIdentifier()
    {
        return $this->getKey();
    }

    public function getJWTCustomClaims()
    {
        return [];
    }
}
1.5 Setting up Authentication Routes
In your routes/api.php, add routes for authentication:

php
Copy
use App\Http\Controllers\AuthController;

Route::post('login', [AuthController::class, 'login']);
Then, create the AuthController for handling login and token generation:

php
Copy
php artisan make:controller AuthController
In AuthController, implement the login method:

php
Copy
namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Tymon\JWTAuth\Facades\JWTAuth;
use App\Models\User;

class AuthController extends Controller
{
    public function login(Request $request)
    {
        $credentials = $request->only(['email', 'password']);

        if ($token = JWTAuth::attempt($credentials)) {
            return response()->json(compact('token'));
        }

        return response()->json(['error' => 'Unauthorized'], 401);
    }
}
1.6 Create Middleware for Role-Based Access
Create a middleware to check for roles (Admin, Counselor):

bash
Copy
php artisan make:middleware RoleMiddleware
In app/Http/Middleware/RoleMiddleware.php:

php
Copy
public function handle($request, Closure $next, $role)
{
    if (auth()->check() && auth()->user()->role == $role) {
        return $next($request);
    }

    return response()->json(['error' => 'Unauthorized'], 403);
}
1.7 Protect Routes with Role-Based Access
In routes/api.php, use the middleware to protect routes for Admin and Counselor:

php
Copy
Route::middleware(['auth:api', 'role:admin'])->group(function () {
    Route::post('/assign-lead', 'LeadController@assignLead');
});

Route::middleware(['auth:api', 'role:counselor'])->group(function () {
    Route::post('/update-lead-status', 'LeadController@updateLeadStatus');
});
1.8 Create Controllers for Lead Management
Create LeadController to handle lead assignment and status updates:

bash
Copy
php artisan make:controller LeadController
In LeadController.php, define methods for assigning leads and updating their status:

php
Copy
public function assignLead(Request $request)
{
    $lead = Lead::find($request->lead_id);
    $lead->counselor_id = $request->counselor_id;
    $lead->save();

    return response()->json(['message' => 'Lead assigned']);
}

public function updateLeadStatus(Request $request)
{
    $lead = Lead::find($request->lead_id);
    $lead->status = $request->status;
    $lead->save();

    return response()->json(['message' => 'Lead status updated']);
}
Step 2: Frontend Setup (Vue.js)
2.1 Create Vue.js Project
Create a new Vue.js project using Vue CLI:

bash
Copy
npm install -g @vue/cli
vue create crm-frontend
Navigate into the project:

bash
Copy
cd crm-frontend
2.2 Install Dependencies
Install axios for API requests:

bash
Copy
npm install axios vuex
2.3 Setting up Vuex Store for State Management
In src/store/index.js, set up the state to manage leads:

js
Copy
import Vue from 'vue';
import Vuex from 'vuex';
import axios from 'axios';

Vue.use(Vuex);

export default new Vuex.Store({
  state: {
    leads: [],
    applications: [],
  },
  mutations: {
    setLeads(state, leads) {
      state.leads = leads;
    },
    setApplications(state, applications) {
      state.applications = applications;
    },
  },
  actions: {
    async fetchLeads({ commit }) {
      const response = await axios.get('/api/leads');
      commit('setLeads', response.data);
    },
    async fetchApplications({ commit }) {
      const response = await axios.get('/api/applications');
      commit('setApplications', response.data);
    },
  },
});
2.4 Create Dashboard for Leads and Applications
In src/components/Dashboard.vue, you can display the leads:

html
Copy
<template>
  <div>
    <h2>Leads Dashboard</h2>
    <ul>
      <li v-for="lead in leads" :key="lead.id">{{ lead.name }}</li>
    </ul>
  </div>
</template>

<script>
export default {
  data() {
    return {
      leads: [],
    };
  },
  created() {
    this.fetchLeads();
  },
  methods: {
    async fetchLeads() {
      const response = await axios.get('/api/leads');
      this.leads = response.data;
    },
  },
};
</script>
2.5 Add Drag-and-Drop Kanban Board
Install vuedraggable:

bash
Copy
npm install vuedraggable
In your component, implement drag-and-drop:

html
Copy
<template>
  <draggable v-model="leads" :group="{ name: 'leads', pull: 'clone', put: false }">
    <div v-for="lead in leads" :key="lead.id">{{ lead.name }}</div>
  </draggable>
</template>
Step 3: DSA Task (PHP)
3.1 Write the Function to Find the Most Active Counselor
In app/Helpers/ActivityHelper.php, create a function to calculate the most active counselor:

php
Copy
use Carbon\Carbon;

function getMostActiveCounselor()
{
    $dateThreshold = Carbon::now()->subDays(30);

    // Assuming 'applications' table stores counselor_id and application processed time
    $activeCounselors = DB::table('applications')
        ->where('processed_at', '>=', $dateThreshold)
        ->select('counselor_id', DB::raw('COUNT(*) as applications_processed'))
        ->groupBy('counselor_id')
        ->orderByDesc('applications_processed')
        ->first();

    return $activeCounselors;
}
This function looks at applications processed in the last 30 days, counts them, and returns the counselor with the highest count.

Conclusion
Backend (Laravel): We created JWT authentication, role-based access, and APIs to manage leads and applications.
Frontend (Vue.js): Set up Vue.js with Vuex for state management, and built components for the dashboard and Kanban board.
DSA Task: Implemented a function to identify the most active counselor based on their processed applications in the last 30 days.
This is the full setup to build your CRM system with Laravel, Vue.js, and a DSA-related task in PHP. If you need more details on any step, feel free to ask!













======================================================================================
# API Endpoints (Basic Structure)

# Authentication:
POST /api/login - Login for users (both Admin and Counselors) with JWT authentication.
POST /api/logout - Logout and invalidate the JWT.

# Lead Management (Admin Only):
GET /api/leads - Get all leads.
POST /api/leads - Create a new lead.
PUT /api/leads/{id} - Update a lead’s status (Admin only).
DELETE /api/leads/{id} - Delete a lead.

# Assigning Leads (Admin Only):
POST /api/leads/{id}/assign - Assign a lead to a counselor.
Lead Status Update (Counselor Only):

PUT /api/leads/{id}/status - Counselor updates the lead’s status.
Applications (Counselor):

POST /api/applications - Create a new application for a lead.
PUT /api/applications/{id}/status - Update the application’s status (Approved, Rejected, In Progress).



